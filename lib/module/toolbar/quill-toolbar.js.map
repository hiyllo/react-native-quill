{"version":3,"sources":["quill-toolbar.tsx"],"names":["React","Component","View","KeyboardAvoidingView","ScrollView","Dimensions","StyleSheet","Platform","fullOptions","basicOptions","lightTheme","darkTheme","getToolbarData","ToolbarProvider","SelectionBar","ToolSet","ToolbarSeparator","WIDTH","get","width","QuillToolbar","constructor","props","options","custom","toolbarOptions","toolSets","icons","state","defaultFontFamily","setState","setTimeout","editor","current","on","onFormatChange","data","formats","name","value","format","styles","theme","defaultStyles","makeStyles","toolbarStyle","toolbar","root","map","object","index","length","color","undefined","componentDidMount","listenToEditor","prepareIconset","changeTheme","componentDidUpdate","prevProps","prevState","render","container","e","stopPropagation","OS","renderToolbar","ContainerComponent","create","position","bottom","left","padding","backgroundColor","background","flexDirection","justifyContent","height","size"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  View,\n  KeyboardAvoidingView,\n  ScrollView,\n  Dimensions,\n  StyleSheet,\n  Platform,\n} from 'react-native';\nimport { fullOptions, basicOptions } from '../constants/toolbar-options';\nimport type {\n  ToolbarTheme,\n  TextListData,\n  ToggleData,\n  ColorListData,\n  ToolbarCustom,\n  CustomStyles,\n} from '../types';\nimport { lightTheme, darkTheme } from '../constants/themes';\nimport { getToolbarData } from '../utils/toolbar-utils';\nimport type QuillEditor from '../editor/quill-editor';\nimport { ToolbarProvider } from './components/toolbar-context';\nimport { SelectionBar } from './components/selection-bar';\nimport { ToolSet } from './components/tool-set';\nimport { ToolbarSeparator } from './components/toolbar-separator';\nimport type { FormatChangeData } from '../constants/editor-event';\n\nconst WIDTH = Dimensions.get('window').width;\n\ninterface QuillToolbarProps {\n  options: Array<Array<string | object> | string | object> | 'full' | 'basic';\n  styles?: CustomStyles;\n  editor: React.RefObject<QuillEditor>;\n  theme: ToolbarTheme | 'dark' | 'light';\n  custom?: ToolbarCustom;\n  container?: false | 'avoiding-view' | React.ComponentType;\n}\n\ninterface ToolbarState {\n  toolSets: Array<Array<ToggleData | TextListData | ColorListData>>;\n  formats: object;\n  theme: ToolbarTheme;\n  defaultFontFamily?: string;\n}\n\nexport class QuillToolbar extends Component<QuillToolbarProps, ToolbarState> {\n  public static defaultProps = {\n    theme: 'dark',\n  };\n\n  constructor(props: QuillToolbarProps) {\n    super(props);\n    this.state = {\n      toolSets: [],\n      formats: {},\n      theme: lightTheme,\n      defaultFontFamily: undefined,\n    };\n  }\n\n  editor?: QuillEditor;\n\n  componentDidMount() {\n    this.listenToEditor();\n    this.prepareIconset();\n    this.changeTheme();\n  }\n\n  componentDidUpdate(prevProps: QuillToolbarProps, prevState: ToolbarState) {\n    if (\n      prevProps.options !== this.props.options ||\n      prevState.defaultFontFamily !== this.state.defaultFontFamily\n    ) {\n      this.prepareIconset();\n    }\n    if (prevProps.theme !== this.props.theme) {\n      this.changeTheme();\n    }\n  }\n\n  changeTheme() {\n    let theme: ToolbarTheme = lightTheme;\n\n    if (this.props.theme === 'dark') {\n      theme = darkTheme;\n    } else if (this.props.theme !== 'light') {\n      theme = this.props.theme;\n    }\n    this.setState({ theme });\n  }\n\n  private prepareIconset = () => {\n    const { options, custom } = this.props;\n    let toolbarOptions: Array<Array<string | object> | string | object> = [];\n    if (options === 'full' || options === []) {\n      toolbarOptions = fullOptions;\n    } else if (options === 'basic') {\n      toolbarOptions = basicOptions;\n    } else {\n      toolbarOptions = options;\n    }\n    const toolSets = getToolbarData(\n      toolbarOptions,\n      custom?.icons,\n      this.state.defaultFontFamily\n    );\n    this.setState({ toolSets });\n  };\n\n  private listenToEditor = () => {\n    setTimeout(() => {\n      const {\n        editor: { current },\n      } = this.props;\n      if (current) {\n        this.editor = current;\n        current.on('format-change', this.onFormatChange);\n        if (this.editor?.props.defaultFontFamily) {\n          this.setState({\n            defaultFontFamily: this.editor?.props.defaultFontFamily,\n          });\n        }\n      }\n    }, 200);\n  };\n\n  private onFormatChange = (data: FormatChangeData) => {\n    this.setState({ formats: data.formats });\n  };\n\n  private format = (name: string, value: any) => {\n    this.editor?.format(name, value);\n  };\n\n  renderToolbar = () => {\n    const { styles, custom } = this.props;\n    const { toolSets, theme, formats } = this.state;\n    const defaultStyles = makeStyles(theme);\n\n    const toolbarStyle = styles?.toolbar?.root\n      ? styles?.toolbar?.root(defaultStyles.toolbar)\n      : defaultStyles.toolbar;\n    return (\n      <ToolbarProvider\n        theme={theme}\n        format={this.format}\n        selectedFormats={formats}\n        custom={custom}\n        styles={styles}\n      >\n        <SelectionBar />\n        <View style={toolbarStyle}>\n          <ScrollView\n            horizontal={true}\n            bounces={false}\n            showsHorizontalScrollIndicator={false}\n          >\n            {toolSets.map((object, index) => {\n              return (\n                object.length > 0 && (\n                  <React.Fragment key={index}>\n                    <ToolSet tools={object} />\n                    {toolSets.length > index && (\n                      <ToolbarSeparator color={theme.color} />\n                    )}\n                  </React.Fragment>\n                )\n              );\n            })}\n          </ScrollView>\n        </View>\n      </ToolbarProvider>\n    );\n  };\n\n  render() {\n    const { container = 'avoiding-view' } = this.props;\n    if (container === 'avoiding-view')\n      return (\n        <KeyboardAvoidingView\n          onTouchStart={(e) => e.stopPropagation()}\n          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        >\n          {this.renderToolbar()}\n        </KeyboardAvoidingView>\n      );\n    else if (container === false) return this.renderToolbar();\n    else {\n      const ContainerComponent = container;\n      return <ContainerComponent>{this.renderToolbar()}</ContainerComponent>;\n    }\n  }\n}\n\nconst makeStyles = (theme: ToolbarTheme) =>\n  StyleSheet.create({\n    toolbar: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      width: WIDTH,\n      padding: 2,\n      backgroundColor: theme.background,\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      height: theme.size + 8,\n    },\n  });\n"]}