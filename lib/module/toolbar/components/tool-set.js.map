{"version":3,"sources":["tool-set.tsx"],"names":["React","View","StyleSheet","ListButton","ToggleIconButton","ColorListButton","formatType","useToolbar","ToolSet","props","tools","styles","renderToggle","index","data","name","source","valueOff","valueOn","renderTextList","values","renderColorList","rootStyle","toolbar","toolset","root","defaultStyles","map","tool","type","select","color","create","flexDirection","justifyContent","alignItems","paddingTop","paddingBottom","paddingLeft","paddingRight","marginRight"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,cAAjC;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAEA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAMA,OAAO,MAAMC,OAAwB,GAAIC,KAAD,IAAW;AAAA;;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAaJ,UAAU,EAA7B;;AACA,QAAMK,YAAY,GAAG,CAACC,KAAD,EAAgBC,IAAhB,kBACnB,oBAAC,gBAAD;AACE,IAAA,GAAG,EAAED,KADP;AAEE,IAAA,IAAI,EAAEC,IAAI,CAACC,IAFb;AAGE,IAAA,MAAM,EAAED,IAAI,CAACE,MAHf;AAIE,IAAA,QAAQ,EAAEF,IAAI,CAACG,QAJjB;AAKE,IAAA,OAAO,EAAEH,IAAI,CAACI;AALhB,IADF;;AAUA,QAAMC,cAAc,GAAG,CAACN,KAAD,EAAgBC,IAAhB,kBACrB,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAED,KAAjB;AAAwB,IAAA,IAAI,EAAEC,IAAI,CAACC,IAAnC;AAAyC,IAAA,KAAK,EAAED,IAAI,CAACM;AAArD,IADF;;AAIA,QAAMC,eAAe,GAAG,CAACR,KAAD,EAAgBC,IAAhB,kBACtB,oBAAC,eAAD;AACE,IAAA,GAAG,EAAED,KADP;AAEE,IAAA,IAAI,EAAEC,IAAI,CAACC,IAFb;AAGE,IAAA,KAAK,EAAED,IAAI,CAACM,MAHd;AAIE,IAAA,MAAM,EAAEN,IAAI,CAACE;AAJf,IADF;;AASA,QAAMM,SAAS,GAAGX,MAAM,SAAN,IAAAA,MAAM,WAAN,uBAAAA,MAAM,CAAEY,OAAR,qFAAiBC,OAAjB,wEAA0BC,IAA1B,uBACdd,MAAM,CAACY,OADO,8EACd,iBAAgBC,OADF,0DACd,sBAAyBC,IAAzB,CAA8BC,aAAa,CAACF,OAA5C,CADc,GAEdE,aAAa,CAACF,OAFlB;AAIA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEF;AAAb,KACGZ,KAAK,CAACiB,GAAN,CAAU,CAACC,IAAD,EAAOf,KAAP,KAAiB;AAC1B,UAAM;AAAEgB,MAAAA;AAAF,QAAWD,IAAjB;;AACA,QAAIC,IAAI,KAAKvB,UAAU,CAACwB,MAAxB,EAAgC;AAC9B,aAAOX,cAAc,CAACN,KAAD,EAAQe,IAAR,CAArB;AACD,KAFD,MAEO,IAAIC,IAAI,KAAKvB,UAAU,CAACyB,KAAxB,EAA+B;AACpC,aAAOV,eAAe,CAACR,KAAD,EAAQe,IAAR,CAAtB;AACD,KAFM,MAEA;AACL,aAAOhB,YAAY,CAACC,KAAD,EAAQe,IAAR,CAAnB;AACD;AACF,GATA,CADH,CADF;AAcD,CA5CM;AA8CP,MAAMF,aAAa,GAAGxB,UAAU,CAAC8B,MAAX,CAAkB;AACtCR,EAAAA,OAAO,EAAE;AACPS,IAAAA,aAAa,EAAE,KADR;AAEPC,IAAAA,cAAc,EAAE,YAFT;AAGPC,IAAAA,UAAU,EAAE,YAHL;AAIPC,IAAAA,UAAU,EAAE,CAJL;AAKPC,IAAAA,aAAa,EAAE,CALR;AAMPC,IAAAA,WAAW,EAAE,CANN;AAOPC,IAAAA,YAAY,EAAE,CAPP;AAQPC,IAAAA,WAAW,EAAE;AARN;AAD6B,CAAlB,CAAtB","sourcesContent":["import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { ListButton } from './list-button';\nimport { ToggleIconButton } from './toggle-icon-button';\nimport { ColorListButton } from './color-list-button';\nimport type { ColorListData, TextListData, ToggleData } from '../../types';\nimport { formatType } from '../../constants/formats';\nimport { useToolbar } from './toolbar-context';\n\ninterface Props {\n  tools: Array<ToggleData | TextListData | ColorListData>;\n}\n\nexport const ToolSet: React.FC<Props> = (props) => {\n  const { tools } = props;\n  const { styles } = useToolbar();\n  const renderToggle = (index: number, data: ToggleData) => (\n    <ToggleIconButton\n      key={index}\n      name={data.name}\n      source={data.source}\n      valueOff={data.valueOff}\n      valueOn={data.valueOn}\n    />\n  );\n\n  const renderTextList = (index: number, data: TextListData) => (\n    <ListButton key={index} name={data.name} items={data.values} />\n  );\n\n  const renderColorList = (index: number, data: ColorListData) => (\n    <ColorListButton\n      key={index}\n      name={data.name}\n      items={data.values}\n      source={data.source}\n    />\n  );\n\n  const rootStyle = styles?.toolbar?.toolset?.root\n    ? styles.toolbar?.toolset?.root(defaultStyles.toolset)\n    : defaultStyles.toolset;\n\n  return (\n    <View style={rootStyle}>\n      {tools.map((tool, index) => {\n        const { type } = tool;\n        if (type === formatType.select) {\n          return renderTextList(index, tool as TextListData);\n        } else if (type === formatType.color) {\n          return renderColorList(index, tool as ColorListData);\n        } else {\n          return renderToggle(index, tool as ToggleData);\n        }\n      })}\n    </View>\n  );\n};\n\nconst defaultStyles = StyleSheet.create({\n  toolset: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    paddingTop: 2,\n    paddingBottom: 2,\n    paddingLeft: 3,\n    paddingRight: 3,\n    marginRight: 1,\n  },\n});\n"]}