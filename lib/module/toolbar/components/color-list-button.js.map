{"version":3,"sources":["color-list-button.tsx"],"names":["React","View","Image","StyleSheet","TouchableOpacity","useToolbar","ColorListButton","name","items","source","theme","show","hide","open","selectionName","getSelected","styles","defaultStyles","makeStyles","toolStyle","toolbar","toolset","colorListButton","tool","overlayStyle","overlay","imageStyle","image","showMenu","selectedValue","selectedItem","find","x","valueOn","isOpen","tintColor","color","create","absoluteFillObject","backgroundColor","borderRadius","alignItems","justifyContent","padding","marginRight","marginLeft","height","Math","round","size","width"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,IADF,EAEEC,KAFF,EAGEC,UAHF,EAIEC,gBAJF,QAMO,cANP;AAQA,SAASC,UAAT,QAA2B,mBAA3B;AAQA,OAAO,MAAMC,eAAgC,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA6B;AAAA;;AAC3E,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,WANI;AAOJC,IAAAA;AAPI,MAQFX,UAAU,EARd;AASA,QAAMY,aAAa,GAAGC,UAAU,CAACR,KAAD,CAAhC;AACA,QAAMS,SAAS,GAAGH,MAAM,SAAN,IAAAA,MAAM,WAAN,uBAAAA,MAAM,CAAEI,OAAR,qFAAiBC,OAAjB,kGAA0BC,eAA1B,0EAA2CC,IAA3C,uBACdP,MAAM,CAACI,OADO,8EACd,iBAAgBC,OADF,0DACd,sBAAyBC,eAAzB,CAAyCC,IAAzC,CAA8CN,aAAa,CAACM,IAA5D,CADc,GAEdN,aAAa,CAACM,IAFlB;AAGA,QAAMC,YAAY,GAAGR,MAAM,SAAN,IAAAA,MAAM,WAAN,wBAAAA,MAAM,CAAEI,OAAR,uFAAiBC,OAAjB,kGAA0BC,eAA1B,0EAA2CG,OAA3C,uBACjBT,MAAM,CAACI,OADU,8EACjB,iBAAgBC,OADC,0DACjB,sBAAyBC,eAAzB,CAAyCG,OAAzC,CAAiDR,aAAa,CAACQ,OAA/D,CADiB,GAEjBR,aAAa,CAACQ,OAFlB;AAGA,QAAMC,UAAU,GAAGV,MAAM,SAAN,IAAAA,MAAM,WAAN,wBAAAA,MAAM,CAAEI,OAAR,uFAAiBC,OAAjB,kGAA0BC,eAA1B,0EAA2CK,KAA3C,uBACfX,MAAM,CAACI,OADQ,8EACf,iBAAgBC,OADD,0DACf,sBAAyBC,eAAzB,CAAyCK,KAAzC,CAA+CV,aAAa,CAACU,KAA7D,CADe,GAEfV,aAAa,CAACU,KAFlB;;AAIA,QAAMC,QAAQ,GAAG,MAAM;AACrB,QAAIf,IAAI,IAAIC,aAAa,KAAKP,IAA9B,EAAoCK,IAAI,GAAxC,KACKD,IAAI,CAACJ,IAAD,EAAOC,KAAP,CAAJ;AACN,GAHD;;AAKA,QAAMqB,aAAa,GAAGd,WAAW,CAACR,IAAD,CAAjC;AACA,QAAMuB,YAAY,GAAGtB,KAAK,CAACuB,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcJ,aAAhC,CAArB;AACA,QAAMK,MAAM,GAAGpB,aAAa,KAAKP,IAAjC;AACA,sBACE,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEqB;AAA3B,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAET;AAAb,kBACE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAEV,MADV;AAEE,IAAA,KAAK,EAAE,CACLiB,UADK,EAEL;AACES,MAAAA,SAAS,EACPL,YAAY,IACZA,YAAY,CAACG,OAAb,KAAyB,KADzB,IAEA,OAAOH,YAAY,CAACG,OAApB,KAAgC,QAFhC,GAGIH,YAAY,CAACG,OAHjB,GAIIvB,KAAK,CAAC0B;AANd,KAFK;AAFT,IADF,EAeGF,MAAM,iBAAI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEV;AAAb,IAfb,CADF,CADF;AAqBD,CAlDM;;AAoDP,MAAMN,UAAU,GAAIR,KAAD,IACjBP,UAAU,CAACkC,MAAX,CAAkB;AAChBZ,EAAAA,OAAO,EAAE,EACP,GAAGtB,UAAU,CAACmC,kBADP;AAEPC,IAAAA,eAAe,EAAE7B,KAAK,CAACe,OAFhB;AAGPe,IAAAA,YAAY,EAAE;AAHP,GADO;AAMhBjB,EAAAA,IAAI,EAAE;AACJiB,IAAAA,YAAY,EAAE,CADV;AAEJC,IAAAA,UAAU,EAAE,QAFR;AAGJC,IAAAA,cAAc,EAAE,QAHZ;AAIJC,IAAAA,OAAO,EAAE,CAJL;AAKJC,IAAAA,WAAW,EAAE,CALT;AAMJC,IAAAA,UAAU,EAAE,CANR;AAOJC,IAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWtC,KAAK,CAACuC,IAAjB,CAPJ;AAQJC,IAAAA,KAAK,EAAEH,IAAI,CAACC,KAAL,CAAWtC,KAAK,CAACuC,IAAjB;AARH,GANU;AAgBhBtB,EAAAA,KAAK,EAAE;AACLmB,IAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWtC,KAAK,CAACuC,IAAN,GAAa,GAAxB,CADH;AAELC,IAAAA,KAAK,EAAEH,IAAI,CAACC,KAAL,CAAWtC,KAAK,CAACuC,IAAN,GAAa,GAAxB,CAFF;AAGLd,IAAAA,SAAS,EAAEzB,KAAK,CAAC0B;AAHZ;AAhBS,CAAlB,CADF","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Image,\n  StyleSheet,\n  TouchableOpacity,\n  ImageSourcePropType,\n} from 'react-native';\nimport type { ToggleData, ToolbarTheme } from '../../types';\nimport { useToolbar } from './toolbar-context';\n\ninterface Props {\n  name: string;\n  source: ImageSourcePropType;\n  items: Array<ToggleData>;\n}\n\nexport const ColorListButton: React.FC<Props> = ({ name, items, source }) => {\n  const {\n    theme,\n    show,\n    hide,\n    open,\n    selectionName,\n    getSelected,\n    styles,\n  } = useToolbar();\n  const defaultStyles = makeStyles(theme);\n  const toolStyle = styles?.toolbar?.toolset?.colorListButton?.tool\n    ? styles.toolbar?.toolset?.colorListButton.tool(defaultStyles.tool)\n    : defaultStyles.tool;\n  const overlayStyle = styles?.toolbar?.toolset?.colorListButton?.overlay\n    ? styles.toolbar?.toolset?.colorListButton.overlay(defaultStyles.overlay)\n    : defaultStyles.overlay;\n  const imageStyle = styles?.toolbar?.toolset?.colorListButton?.image\n    ? styles.toolbar?.toolset?.colorListButton.image(defaultStyles.image)\n    : defaultStyles.image;\n\n  const showMenu = () => {\n    if (open && selectionName === name) hide();\n    else show(name, items);\n  };\n\n  const selectedValue = getSelected(name);\n  const selectedItem = items.find((x) => x.valueOn === selectedValue);\n  const isOpen = selectionName === name;\n  return (\n    <TouchableOpacity onPress={showMenu}>\n      <View style={toolStyle}>\n        <Image\n          source={source}\n          style={[\n            imageStyle,\n            {\n              tintColor:\n                selectedItem &&\n                selectedItem.valueOn !== false &&\n                typeof selectedItem.valueOn === 'string'\n                  ? selectedItem.valueOn\n                  : theme.color,\n            },\n          ]}\n        />\n        {isOpen && <View style={overlayStyle} />}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst makeStyles = (theme: ToolbarTheme) =>\n  StyleSheet.create({\n    overlay: {\n      ...StyleSheet.absoluteFillObject,\n      backgroundColor: theme.overlay,\n      borderRadius: 3,\n    },\n    tool: {\n      borderRadius: 3,\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: 2,\n      marginRight: 4,\n      marginLeft: 4,\n      height: Math.round(theme.size),\n      width: Math.round(theme.size),\n    },\n    image: {\n      height: Math.round(theme.size * 0.6),\n      width: Math.round(theme.size * 0.6),\n      tintColor: theme.color,\n    },\n  });\n"]}