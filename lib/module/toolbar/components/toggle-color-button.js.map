{"version":3,"sources":["toggle-color-button.tsx"],"names":["React","TouchableWithoutFeedback","View","StyleSheet","useToolbar","ToggleColorButton","props","apply","isSelected","theme","styles","name","valueOff","valueOn","selected","handlePresss","defaultStyles","makeStyles","toolStyle","selection","colorToggle","tool","overlayStyle","overlay","noColorStyle","noColor","backgroundColor","create","absoluteFillObject","borderRadius","borderWidth","borderColor","color","alignItems","justifyContent","marginRight","marginLeft","height","Math","round","size","width","borderTopWidth","transform","rotate","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TouchableWithoutFeedback, View, StyleSheet } from 'react-native';\nimport type { ToolbarTheme } from '../../types';\nimport { useToolbar } from './toolbar-context';\n\ninterface Props {\n  valueOn: string | false;\n  valueOff?: string | false;\n  name: string;\n}\n\nexport const ToggleColorButton: React.FC<Props> = (props) => {\n  const { apply, isSelected, theme, styles } = useToolbar();\n  const { name, valueOff, valueOn } = props;\n  const selected = isSelected(name, valueOn);\n  const handlePresss = () => apply(name, selected ? valueOff : valueOn);\n  const defaultStyles = makeStyles(theme);\n  const toolStyle = styles?.selection?.colorToggle?.tool\n    ? styles.selection.colorToggle.tool(defaultStyles.tool)\n    : defaultStyles.tool;\n  const overlayStyle = styles?.selection?.colorToggle?.overlay\n    ? styles.selection.colorToggle.overlay(defaultStyles.overlay)\n    : defaultStyles.overlay;\n  const noColorStyle = styles?.selection?.colorToggle?.noColor\n    ? styles.selection.colorToggle.noColor(defaultStyles.noColor)\n    : defaultStyles.noColor;\n  return (\n    <TouchableWithoutFeedback onPress={handlePresss}>\n      <View\n        style={[\n          toolStyle,\n          {\n            backgroundColor: valueOn !== false ? valueOn : theme.overlay,\n          },\n        ]}\n      >\n        {selected && <View style={overlayStyle} />}\n        {valueOn === false && <View style={noColorStyle} />}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nconst makeStyles = (theme: ToolbarTheme) =>\n  StyleSheet.create({\n    overlay: {\n      ...StyleSheet.absoluteFillObject,\n      borderRadius: 3,\n      borderWidth: 1,\n      borderColor: theme.color,\n    },\n    tool: {\n      borderRadius: 3,\n      alignItems: 'center',\n      justifyContent: 'center',\n      marginRight: 4,\n      marginLeft: 4,\n      height: Math.round(theme.size - 2),\n      width: Math.round(theme.size - 2),\n    },\n    noColor: {\n      borderTopWidth: 1,\n      backgroundColor: theme.overlay,\n      borderColor: theme.color,\n      width: '100%',\n      transform: [{ rotate: '45deg' }],\n    },\n  });\n\nToggleColorButton.defaultProps = {\n  valueOff: false,\n};\n"]}