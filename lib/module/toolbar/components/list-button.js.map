{"version":3,"sources":["list-button.tsx"],"names":["React","View","Text","StyleSheet","TouchableOpacity","Image","useToolbar","ListButton","name","items","theme","show","hide","open","selectionName","getSelected","styles","defaultStyles","makeStyles","toolStyle","toolbar","toolset","listButton","tool","overlayStyle","overlay","textStyle","text","imageStyle","image","showMenu","selectedValue","selectedItem","find","x","valueOn","isOpen","source","create","absoluteFillObject","backgroundColor","borderRadius","alignItems","justifyContent","padding","marginRight","marginLeft","height","Math","round","size","width","tintColor","color","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, Image } from 'react-native';\nimport type { ToggleData, ToolbarTheme } from '../../types';\nimport { useToolbar } from './toolbar-context';\n\ninterface Props {\n  name: string;\n  items: Array<ToggleData>;\n}\n\nexport const ListButton: React.FC<Props> = ({ name, items }) => {\n  const {\n    theme,\n    show,\n    hide,\n    open,\n    selectionName,\n    getSelected,\n    styles,\n  } = useToolbar();\n  const defaultStyles = makeStyles(theme);\n  const toolStyle = styles?.toolbar?.toolset?.listButton?.tool\n    ? styles.toolbar?.toolset?.listButton.tool(defaultStyles.tool)\n    : defaultStyles.tool;\n  const overlayStyle = styles?.toolbar?.toolset?.listButton?.overlay\n    ? styles.toolbar?.toolset?.listButton.overlay(defaultStyles.overlay)\n    : defaultStyles.overlay;\n  const textStyle = styles?.toolbar?.toolset?.listButton?.text\n    ? styles.toolbar?.toolset?.listButton.text(defaultStyles.text)\n    : defaultStyles.text;\n  const imageStyle = styles?.toolbar?.toolset?.listButton?.image\n    ? styles.toolbar?.toolset?.listButton.image(defaultStyles.image)\n    : defaultStyles.image;\n  const showMenu = () => {\n    if (open && selectionName === name) hide();\n    else show(name, items);\n  };\n\n  const selectedValue = getSelected(name);\n  const selectedItem = items.find((x) => x.valueOn === selectedValue);\n  const isOpen = selectionName === name;\n\n  return (\n    <TouchableOpacity onPress={showMenu}>\n      <View style={toolStyle}>\n        {selectedItem?.source ? (\n          <Image source={selectedItem.source} style={imageStyle} />\n        ) : (\n          <Text style={textStyle}>\n            {selectedItem ? selectedItem.name : name}\n          </Text>\n        )}\n        {isOpen && <View style={[overlayStyle]} />}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst makeStyles = (theme: ToolbarTheme) =>\n  StyleSheet.create({\n    overlay: {\n      ...StyleSheet.absoluteFillObject,\n      backgroundColor: theme.overlay,\n      borderRadius: 3,\n    },\n    tool: {\n      borderRadius: 3,\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: 2,\n      marginRight: 4,\n      marginLeft: 4,\n      height: Math.round(theme.size),\n    },\n    image: {\n      height: Math.round(theme.size * 0.6),\n      width: Math.round(theme.size * 0.6),\n      tintColor: theme.color,\n    },\n    text: {\n      color: theme.color,\n      fontWeight: 'bold',\n    },\n  });\n"]}