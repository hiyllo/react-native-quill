{"version":3,"sources":["toolbar-context.tsx"],"names":["React","Component","useContext","StyleSheet","Animated","Easing","lightTheme","ToolbarContext","createContext","apply","show","hide","selectedFormats","open","isSelected","theme","options","selectionName","getSelected","ToolbarConsumer","Consumer","ToolbarProvider","constructor","props","name","state","isAnimating","setState","timing","animatedValue","toValue","size","duration","easing","sin","useNativeDriver","start","linear","value","selected","format","custom","actions","find","x","indexOf","handler","Value","componentDidMount","render","children","styles","defaultStyles","makeStyles","rootStyle","toolbar","provider","root","height","create","borderTopWidth","borderLeftWidth","borderRightWidth","borderColor","color","position","backgroundColor","background","width","withToolbar","MyComponent","WrappedComponent","forwardRef","ref","context","useToolbar"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,MAA/B,QAA6C,cAA7C;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAsBA,MAAMC,cAAc,gBAAGP,KAAK,CAACQ,aAAN,CAAkC;AACvDC,EAAAA,KAAK,EAAE,MAAM,CAAE,CADwC;AAEvDC,EAAAA,IAAI,EAAE,MAAM,CAAE,CAFyC;AAGvDC,EAAAA,IAAI,EAAE,MAAM,CAAE,CAHyC;AAIvDC,EAAAA,eAAe,EAAE,EAJsC;AAKvDC,EAAAA,IAAI,EAAE,KALiD;AAMvDC,EAAAA,UAAU,EAAE,MAAM,KANqC;AAOvDC,EAAAA,KAAK,EAAET,UAPgD;AAQvDU,EAAAA,OAAO,EAAE,EAR8C;AASvDC,EAAAA,aAAa,EAAE,EATwC;AAUvDC,EAAAA,WAAW,EAAE,MAAM;AAVoC,CAAlC,CAAvB;AAaA,OAAO,MAAMC,eAAe,GAAGZ,cAAc,CAACa,QAAvC;AAiBP,OAAO,MAAMC,eAAN,SAA8BpB,SAA9B,CAAsE;AAE3EqB,EAAAA,WAAW,CAACC,KAAD,EAAuB;AAChC,UAAMA,KAAN;;AADgC;;AAAA,kCAW3B,CAACC,IAAD,EAAeR,OAAf,KAA8C;AACnD,UAAI,KAAKS,KAAL,CAAWC,WAAf,EAA4B;AAE5B,YAAM;AAAEX,QAAAA;AAAF,UAAY,KAAKQ,KAAvB;;AACA,UAAIR,KAAJ,EAAW;AACT,aAAKY,QAAL,CAAc;AAAEX,UAAAA,OAAF;AAAWQ,UAAAA,IAAX;AAAiBE,UAAAA,WAAW,EAAE;AAA9B,SAAd,EAAoD,MAAM;AACxDtB,UAAAA,QAAQ,CAACwB,MAAT,CAAgB,KAAKC,aAArB,EAAoC;AAClCC,YAAAA,OAAO,EAAE,IAAIf,KAAK,CAACgB,IAAV,GAAiB,EADQ;AAElCC,YAAAA,QAAQ,EAAE,GAFwB;AAGlCC,YAAAA,MAAM,EAAE5B,MAAM,CAAC6B,GAHmB;AAIlCC,YAAAA,eAAe,EAAE;AAJiB,WAApC,EAKGC,KALH,CAKS,MAAM,KAAKT,QAAL,CAAc;AAAEd,YAAAA,IAAI,EAAE,IAAR;AAAca,YAAAA,WAAW,EAAE;AAA3B,WAAd,CALf;AAMD,SAPD;AAQD;AACF,KAzBiC;;AAAA,kCA2B3B,MAAM;AACX,UAAI,KAAKD,KAAL,CAAWC,WAAf,EAA4B;AAC5B,YAAM;AAAEX,QAAAA;AAAF,UAAY,KAAKQ,KAAvB;;AACA,UAAIR,KAAJ,EAAW;AACT,aAAKY,QAAL,CAAc;AAAED,UAAAA,WAAW,EAAE;AAAf,SAAd,EAAqC,MAAM;AACzCtB,UAAAA,QAAQ,CAACwB,MAAT,CAAgB,KAAKC,aAArB,EAAoC;AAClCC,YAAAA,OAAO,EAAEf,KAAK,CAACgB,IAAN,GAAa,EADY;AAElCC,YAAAA,QAAQ,EAAE,GAFwB;AAGlCC,YAAAA,MAAM,EAAE5B,MAAM,CAACgC,MAHmB;AAIlCF,YAAAA,eAAe,EAAE;AAJiB,WAApC,EAKGC,KALH,CAKS,MAAM;AACb,iBAAKT,QAAL,CAAc;AACZH,cAAAA,IAAI,EAAE,EADM;AAEZX,cAAAA,IAAI,EAAE,KAFM;AAGZG,cAAAA,OAAO,EAAE,EAHG;AAIZU,cAAAA,WAAW,EAAE;AAJD,aAAd;AAMD,WAZD;AAaD,SAdD;AAeD;AACF,KA/CiC;;AAAA,wCAsDrB,CAACF,IAAD,EAAec,KAAU,GAAG,IAA5B,KAA8C;AACzD,YAAM;AAAE1B,QAAAA;AAAF,UAAsB,KAAKW,KAAjC;AACA,YAAMgB,QAAQ,GAAG3B,eAAe,CAACY,IAAD,CAAhC;AACA,aAAOe,QAAQ,GAAGA,QAAQ,KAAKD,KAAhB,GAAwBA,KAAK,KAAK,KAAjD;AACD,KA1DiC;;AAAA,yCA4DnBd,IAAD,IAAuB;AACnC,YAAM;AAAEZ,QAAAA;AAAF,UAAsB,KAAKW,KAAjC;AACA,YAAMgB,QAAQ,GAAG3B,eAAe,CAACY,IAAD,CAAhC;AACA,aAAOe,QAAQ,GAAGA,QAAH,GAAc,KAA7B;AACD,KAhEiC;;AAAA,mCAkE1B,CAACf,IAAD,EAAec,KAAf,KAA8B;AAAA;;AACpC,YAAM;AAAEE,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAqB,KAAKlB,KAAhC;AAEA,UAAIkB,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAEC,OAAZ,EAAqBD,MAAM,CAACC,OAAP,CAAeC,IAAf,CAAqBC,CAAD,IAAOA,CAAC,KAAKpB,IAAjC;;AACrB,UAAIiB,MAAM,SAAN,IAAAA,MAAM,WAAN,IAAAA,MAAM,CAAEC,OAAR,IAAmB,CAAAD,MAAM,SAAN,IAAAA,MAAM,WAAN,+BAAAA,MAAM,CAAEC,OAAR,oEAAiBG,OAAjB,CAAyBrB,IAAzB,KAAiC,CAAC,CAAzD,EAA4D;AAC1D,YAAIiB,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAEK,OAAZ,EAAqBL,MAAM,CAACK,OAAP,CAAetB,IAAf,EAAqBc,KAArB;AACtB,OAFD,MAEO;AACLE,QAAAA,MAAM,CAAChB,IAAD,EAAOc,KAAP,CAAN;AACD;AACF,KA3EiC;;AAEhC,SAAKb,KAAL,GAAa;AACXZ,MAAAA,IAAI,EAAE,KADK;AAEXa,MAAAA,WAAW,EAAE,KAFF;AAGXV,MAAAA,OAAO,EAAE,EAHE;AAIXQ,MAAAA,IAAI,EAAE;AAJK,KAAb;AAMA,SAAKK,aAAL,GAAqB,IAAIzB,QAAQ,CAAC2C,KAAb,CAAmB,CAAnB,CAArB;AACD;;AAwCDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEjC,MAAAA;AAAF,QAAY,KAAKQ,KAAvB;AACA,SAAKM,aAAL,GAAqB,IAAIzB,QAAQ,CAAC2C,KAAb,CAAmBhC,KAAK,CAACgB,IAAN,GAAa,EAAhC,CAArB;AACD;;AAyBDkB,EAAAA,MAAM,GAAG;AAAA;;AACP,UAAM;AAAErC,MAAAA,eAAF;AAAmBsC,MAAAA,QAAnB;AAA6BnC,MAAAA,KAA7B;AAAoCoC,MAAAA;AAApC,QAA+C,KAAK5B,KAA1D;AACA,UAAM;AAAEV,MAAAA,IAAF;AAAQG,MAAAA,OAAR;AAAiBQ,MAAAA;AAAjB,QAA0B,KAAKC,KAArC;AACA,UAAM2B,aAAa,GAAGC,UAAU,CAACtC,KAAD,CAAhC;AACA,UAAMuC,SAAS,GAAGH,MAAM,SAAN,IAAAA,MAAM,WAAN,uBAAAA,MAAM,CAAEI,OAAR,4DAAiBC,QAAjB,GACdL,MADc,aACdA,MADc,2CACdA,MAAM,CAAEI,OADM,qDACd,iBAAiBC,QAAjB,CAA0BJ,aAAa,CAACK,IAAxC,CADc,GAEdL,aAAa,CAACK,IAFlB;AAGA,wBACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,MAAA,KAAK,EAAE;AACL7C,QAAAA,eADK;AAELH,QAAAA,KAAK,EAAE,KAAKA,KAFP;AAGLK,QAAAA,UAAU,EAAE,KAAKA,UAHZ;AAILC,QAAAA,KAJK;AAKLF,QAAAA,IALK;AAMLH,QAAAA,IAAI,EAAE,KAAKA,IANN;AAOLC,QAAAA,IAAI,EAAE,KAAKA,IAPN;AAQLO,QAAAA,WAAW,EAAE,KAAKA,WARb;AASLD,QAAAA,aAAa,EAAEO,IATV;AAULR,QAAAA,OAVK;AAWLmC,QAAAA;AAXK;AADT,oBAeE,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,KAAK,EAAE,CACLG,SADK,EAEL;AACEI,QAAAA,MAAM,EAAE,KAAK7B;AADf,OAFK;AADT,OAQGqB,QARH,CAfF,CADF;AA4BD;;AAlH0E;;AAqH7E,MAAMG,UAAU,GAAItC,KAAD,IACjBZ,UAAU,CAACwD,MAAX,CAAkB;AAChBF,EAAAA,IAAI,EAAE;AACJG,IAAAA,cAAc,EAAE,CADZ;AAEJC,IAAAA,eAAe,EAAE,CAFb;AAGJC,IAAAA,gBAAgB,EAAE,CAHd;AAIJC,IAAAA,WAAW,EAAEhD,KAAK,CAACiD,KAJf;AAKJC,IAAAA,QAAQ,EAAE,UALN;AAMJC,IAAAA,eAAe,EAAEnD,KAAK,CAACoD,UANnB;AAOJC,IAAAA,KAAK,EAAE;AAPH;AADU,CAAlB,CADF;;AAaA,OAAO,MAAMC,WAAW,GAAIC,WAAD,IAAsB;AAC/C,QAAMC,gBAAgB,gBAAGvE,KAAK,CAACwE,UAAN,CAAiB,CAACjD,KAAD,EAAQkD,GAAR,kBACxC,oBAAC,cAAD,CAAgB,QAAhB,QACIC,OAAD,iBACC,oBAAC,WAAD,eACMnD,KADN;AAEE,IAAA,GAAG,EAAEkD,GAFP;AAGE,IAAA,KAAK,EAAEC,OAAO,CAACjE,KAHjB;AAIE,IAAA,eAAe,EAAEiE,OAAO,CAAC9D;AAJ3B,KAFJ,CADuB,CAAzB;AAaA,SAAO2D,gBAAP;AACD,CAfM;AAiBP,OAAO,MAAMI,UAAU,GAAG,MAAoBzE,UAAU,CAACK,cAAD,CAAjD","sourcesContent":["import React, { Component, useContext } from 'react';\nimport { StyleSheet, Animated, Easing } from 'react-native';\nimport { lightTheme } from '../../constants/themes';\nimport type {\n  CustomStyles,\n  ToggleData,\n  ToolbarCustom,\n  ToolbarTheme,\n} from '../../types';\n\nexport interface ContextProps {\n  apply: (name: string, value: any) => void;\n  selectedFormats: object;\n  isSelected: (name: string, value: any) => boolean;\n  theme: ToolbarTheme;\n  show: (name: string, options: Array<ToggleData>) => void;\n  hide: Function;\n  open: boolean;\n  options: Array<ToggleData>;\n  selectionName: string;\n  getSelected: (name: string) => any;\n  styles?: CustomStyles;\n}\n\nconst ToolbarContext = React.createContext<ContextProps>({\n  apply: () => {},\n  show: () => {},\n  hide: () => {},\n  selectedFormats: {},\n  open: false,\n  isSelected: () => false,\n  theme: lightTheme,\n  options: [],\n  selectionName: '',\n  getSelected: () => false,\n});\n\nexport const ToolbarConsumer = ToolbarContext.Consumer;\n\ninterface ProviderProps {\n  format: Function;\n  selectedFormats: Record<string, any>;\n  theme: ToolbarTheme;\n  custom?: ToolbarCustom;\n  styles?: CustomStyles;\n}\n\ninterface ProviderState {\n  open: boolean;\n  isAnimating: boolean;\n  options: Array<ToggleData>;\n  name: string;\n}\n\nexport class ToolbarProvider extends Component<ProviderProps, ProviderState> {\n  animatedValue: Animated.Value;\n  constructor(props: ProviderProps) {\n    super(props);\n    this.state = {\n      open: false,\n      isAnimating: false,\n      options: [],\n      name: '',\n    };\n    this.animatedValue = new Animated.Value(0);\n  }\n\n  show = (name: string, options: Array<ToggleData>) => {\n    if (this.state.isAnimating) return;\n\n    const { theme } = this.props;\n    if (theme) {\n      this.setState({ options, name, isAnimating: true }, () => {\n        Animated.timing(this.animatedValue, {\n          toValue: 2 * theme.size + 14,\n          duration: 200,\n          easing: Easing.sin,\n          useNativeDriver: false,\n        }).start(() => this.setState({ open: true, isAnimating: false }));\n      });\n    }\n  };\n\n  hide = () => {\n    if (this.state.isAnimating) return;\n    const { theme } = this.props;\n    if (theme) {\n      this.setState({ isAnimating: true }, () => {\n        Animated.timing(this.animatedValue, {\n          toValue: theme.size + 10,\n          duration: 200,\n          easing: Easing.linear,\n          useNativeDriver: false,\n        }).start(() => {\n          this.setState({\n            name: '',\n            open: false,\n            options: [],\n            isAnimating: false,\n          });\n        });\n      });\n    }\n  };\n\n  componentDidMount() {\n    const { theme } = this.props;\n    this.animatedValue = new Animated.Value(theme.size + 10);\n  }\n\n  isSelected = (name: string, value: any = true): boolean => {\n    const { selectedFormats } = this.props;\n    const selected = selectedFormats[name];\n    return selected ? selected === value : value === false;\n  };\n\n  getSelected = (name: string): any => {\n    const { selectedFormats } = this.props;\n    const selected = selectedFormats[name];\n    return selected ? selected : false;\n  };\n\n  apply = (name: string, value: any) => {\n    const { format, custom } = this.props;\n\n    if (custom?.actions) custom.actions.find((x) => x === name);\n    if (custom?.actions && custom?.actions?.indexOf(name) > -1) {\n      if (custom?.handler) custom.handler(name, value);\n    } else {\n      format(name, value);\n    }\n  };\n\n  render() {\n    const { selectedFormats, children, theme, styles } = this.props;\n    const { open, options, name } = this.state;\n    const defaultStyles = makeStyles(theme);\n    const rootStyle = styles?.toolbar?.provider\n      ? styles?.toolbar?.provider(defaultStyles.root)\n      : defaultStyles.root;\n    return (\n      <ToolbarContext.Provider\n        value={{\n          selectedFormats,\n          apply: this.apply,\n          isSelected: this.isSelected,\n          theme,\n          open,\n          show: this.show,\n          hide: this.hide,\n          getSelected: this.getSelected,\n          selectionName: name,\n          options,\n          styles,\n        }}\n      >\n        <Animated.View\n          style={[\n            rootStyle,\n            {\n              height: this.animatedValue,\n            },\n          ]}\n        >\n          {children}\n        </Animated.View>\n      </ToolbarContext.Provider>\n    );\n  }\n}\n\nconst makeStyles = (theme: ToolbarTheme) =>\n  StyleSheet.create({\n    root: {\n      borderTopWidth: 1,\n      borderLeftWidth: 1,\n      borderRightWidth: 1,\n      borderColor: theme.color,\n      position: 'relative',\n      backgroundColor: theme.background,\n      width: '100%',\n    },\n  });\n\nexport const withToolbar = (MyComponent: any) => {\n  const WrappedComponent = React.forwardRef((props, ref) => (\n    <ToolbarContext.Consumer>\n      {(context) => (\n        <MyComponent\n          {...props}\n          ref={ref}\n          apply={context.apply}\n          selectedFormats={context.selectedFormats}\n        />\n      )}\n    </ToolbarContext.Consumer>\n  ));\n\n  return WrappedComponent;\n};\n\nexport const useToolbar = (): ContextProps => useContext(ToolbarContext);\n"]}