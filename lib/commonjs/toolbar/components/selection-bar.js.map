{"version":3,"sources":["selection-bar.tsx"],"names":["SelectionBar","theme","options","hide","selectionName","styles","defaultStyles","useStyles","rootStyle","selection","root","scrollStyle","scroll","closeViewStyle","close","view","closeTextStyle","text","map","item","index","type","formatType","color","valueOn","icon","source","name","StyleSheet","create","overlay","absoluteFillObject","backgroundColor","borderRadius","padding","position","top","width","flexDirection","justifyContent","alignItems","height","size","flexGrow","display","fontWeight","borderWidth","borderColor","paddingHorizontal","marginRight","marginLeft","Math","round"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  ScrollView,\n  Text,\n  StyleSheet,\n  View,\n  TouchableOpacity,\n} from 'react-native';\nimport type { ToolbarTheme } from '../../types';\nimport { useToolbar } from './toolbar-context';\nimport { ToggleTextButton } from './toggle-text-button';\nimport { ToggleColorButton } from './toggle-color-button';\nimport { ToggleIconButton } from './toggle-icon-button';\nimport { formatType } from '../../constants/formats';\n\ninterface Props {}\n\nexport const SelectionBar: React.FC<Props> = ({}) => {\n  const { theme, options, hide, selectionName, styles } = useToolbar();\n  const defaultStyles = useStyles(theme);\n  const rootStyle = styles?.selection?.root\n    ? styles.selection.root(defaultStyles.selection)\n    : defaultStyles.selection;\n  const scrollStyle = styles?.selection?.scroll\n    ? styles.selection.scroll(defaultStyles.scroll)\n    : defaultStyles.scroll;\n  const closeViewStyle = styles?.selection?.close?.view\n    ? styles.selection.close.view(defaultStyles.close)\n    : defaultStyles.close;\n\n  const closeTextStyle = styles?.selection?.close?.text\n    ? styles.selection.close.text(defaultStyles.text)\n    : defaultStyles.text;\n  return (\n    <View style={rootStyle}>\n      <ScrollView\n        horizontal={true}\n        bounces={false}\n        showsHorizontalScrollIndicator={false}\n        contentContainerStyle={scrollStyle}\n      >\n        {options &&\n          options.map((item, index) => {\n            if (\n              item.type === formatType.color &&\n              item.valueOn !== true &&\n              typeof item.valueOn !== 'number'\n            ) {\n              return (\n                <ToggleColorButton\n                  key={index}\n                  name={selectionName}\n                  valueOff={false}\n                  valueOn={item.valueOn}\n                />\n              );\n            } else if (item.type === formatType.icon) {\n              return (\n                <ToggleIconButton\n                  key={index}\n                  source={item.source}\n                  name={selectionName}\n                  valueOff={false}\n                  valueOn={item.valueOn}\n                />\n              );\n            } else\n              return (\n                <ToggleTextButton\n                  key={index}\n                  name={selectionName}\n                  valueOff={false}\n                  valueOn={item.valueOn}\n                  valueName={item.name}\n                />\n              );\n          })}\n      </ScrollView>\n      <TouchableOpacity onPress={() => hide()}>\n        <View style={closeViewStyle}>\n          <Text style={closeTextStyle}>Ã—</Text>\n        </View>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst useStyles = (theme: ToolbarTheme) =>\n  StyleSheet.create({\n    overlay: {\n      ...StyleSheet.absoluteFillObject,\n      backgroundColor: theme.overlay,\n      borderRadius: 3,\n    },\n    selection: {\n      padding: 2,\n      position: 'absolute',\n      top: 0,\n      backgroundColor: theme.overlay, //'=rgba(0,0,0,.1)',\n      width: '100%',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      height: theme.size + 4,\n    },\n    scroll: {\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    text: {\n      color: theme.color,\n      fontWeight: 'bold',\n    },\n    close: {\n      borderRadius: 3,\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderWidth: 1,\n      borderColor: theme.overlay,\n      paddingHorizontal: 10,\n      marginRight: 2,\n      marginLeft: 4,\n      height: Math.round(theme.size - 6),\n    },\n  });\n"]}