{"version":3,"sources":["toolbar-utils.ts"],"names":["getToolbarData","options","customIcons","defaultFontFamily","iconSet","icons","defaultIcons","isSingle","length","Array","isArray","set","createToolSet","push","i","opt","console","log","tools","ic","format","formats","find","f","name","type","formatType","toggle","formatIcon","source","valueOff","valueOn","keys","Object","values","j","key","value","listItems","allowCustoms","map","v","def","defaults","formatValueType","text","filter","indexOf","select","x","icon","undefined","color","fIcon"],"mappings":"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","sourcesContent":["import { formats, formatType, formatValueType } from '../constants/formats';\nimport type {\n  ColorListData,\n  formatDefault,\n  TextListData,\n  ToggleData,\n} from '../types';\nimport { icons as defaultIcons } from '../constants/icons';\nimport { getFontName } from './editor-utils';\n\nexport const getToolbarData = (\n  options: Array<Array<string | object> | string | object>,\n  customIcons?: Record<string, any>,\n  defaultFontFamily?: string\n): Array<Array<ToggleData | TextListData | ColorListData>> => {\n  let iconSet: Array<Array<ToggleData | TextListData | ColorListData>> = [];\n  const icons = customIcons\n    ? { ...defaultIcons, ...customIcons }\n    : defaultIcons;\n\n  const isSingle: boolean = !(options.length > 0 && Array.isArray(options[0]));\n  if (isSingle) {\n    const set = createToolSet(options, icons);\n    iconSet.push(set);\n  } else {\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (Array.isArray(opt)) {\n        const set = createToolSet(opt, icons, defaultFontFamily);\n        iconSet.push(set);\n      } else\n        console.log(opt, 'is not an array, you should pass it as an array');\n    }\n  }\n\n  return iconSet;\n};\n\nconst createToolSet = (\n  tools: Array<string | object>,\n  icons: Record<string, any>,\n  defaultFontFamily?: string\n): Array<ToggleData | TextListData | ColorListData> => {\n  let ic: Array<ToggleData | TextListData | ColorListData> = [];\n  for (let i = 0; i < tools.length; i++) {\n    const opt = tools[i];\n\n    if (typeof opt === 'string') {\n      const format = formats.find((f) => f.name === opt);\n      if ((format && format.type === formatType.toggle) || !format) {\n        const formatIcon = icons[opt];\n        if (formatIcon) {\n          ic.push({\n            name: opt,\n            source: formatIcon,\n            valueOff: false,\n            valueOn: true,\n            type: formatType.toggle,\n          } as ToggleData);\n        } else {\n          ic.push({\n            name: opt,\n            valueOff: false,\n            valueOn: true,\n            type: formatType.toggle,\n          } as ToggleData);\n        }\n      }\n    } else if (typeof opt === 'object' && opt !== null) {\n      const keys = Object.keys(opt);\n      const values = Object.values(opt);\n      for (let j = 0; j < keys.length; j++) {\n        const key = keys[j];\n        const value = values[j];\n        const format = formats.find((f) => f.name === key);\n        if (typeof value === 'string' || typeof value === 'number') {\n          const formatIcon = icons[key][value];\n          if (formatIcon) {\n            ic.push({\n              name: key,\n              source: formatIcon,\n              valueOff: false,\n              valueOn: value,\n              type: formatType.toggle,\n            } as ToggleData);\n          } else {\n            ic.push({\n              name: key,\n              valueOff: false,\n              valueOn: value,\n              type: formatType.toggle,\n            } as ToggleData);\n          }\n        } else if (Array.isArray(value)) {\n          const formatIcon = icons[key];\n          let listItems: formatDefault[] = [];\n          if ((!format || format.allowCustoms === true) && value.length > 0) {\n            listItems = value.map((v) => {\n              let def = format?.defaults?.find(\n                (f) => f.value === (v !== '' ? v : false)\n              );\n              if (key === 'font' && defaultFontFamily && def?.value === false) {\n                def.name = defaultFontFamily;\n              }\n              return def\n                ? def\n                : ({\n                    name: v,\n                    value:\n                      key === 'font' && v !== false && v !== ''\n                        ? getFontName(v)\n                        : v,\n                    type: formatValueType.text,\n                  } as formatDefault);\n            });\n          } else if (format?.defaults && value.length === 0) {\n            listItems = format.defaults;\n          } else if (format?.defaults && value.length > 0) {\n            listItems = format.defaults.filter(\n              (f) => value.indexOf(f.value) !== -1\n            );\n          }\n          if (listItems.length > 0) {\n            if (!format || format.type === formatType.select) {\n              ic.push({\n                name: key,\n                values: listItems.map((x) => {\n                  let icon =\n                    x.type === formatValueType.icon\n                      ? x.value === false\n                        ? icons[key]['']\n                        : typeof x.value === 'string'\n                        ? icons[key][x.value]\n                        : undefined\n                      : undefined;\n\n                  return {\n                    name: x.name,\n                    valueOff: false,\n                    valueOn: x.value,\n                    source: icon,\n                    type: (\n                      x.type === formatValueType.icon && icon ? true : false\n                    )\n                      ? formatType.icon\n                      : formatType.toggle,\n                  } as ToggleData;\n                }),\n                type: formatType.select,\n              } as TextListData);\n            } else {\n              ic.push({\n                name: key,\n                source: formatIcon,\n                values: listItems.map(\n                  (x) =>\n                    ({\n                      name: x.name,\n                      valueOff: false,\n                      valueOn: x.value,\n                      type: formatType.color,\n                    } as ToggleData)\n                ),\n                type: formatType.color,\n              } as ColorListData);\n            }\n          } else {\n            const fIcon = icons[key];\n            if (fIcon) {\n              ic.push({\n                name: key,\n                source: fIcon,\n                valueOff: false,\n                valueOn: true,\n                type: formatType.toggle,\n              } as ToggleData);\n            }\n          }\n        }\n      }\n    }\n  }\n  return ic;\n};\n"]}